To determine the total number of queries, the number of incorrect queries, and the number of correct queries, let's analyze each query step by step:

1. **Query 1**: `Search(fields=[name, category, has parking, viewpoint], filters=[category == bar], sort_by=[distance_to(Bards n Brews)])`
   - This query is correct. It searches for bars and sorts them by distance to "Bards n Brews".

2. **Query 2**: `Search(fields=[name, has wifi], filters=[name == The Dive OR name == The Jazz Spot])`
   - This query is correct. It searches for the wifi availability of "The Dive" and "The Jazz Spot".

3. **Query 3**: `Search(fields=[name, category, has parking, has wifi], filters=[category == bar], sort_by=[distance_to(Bards n Brews)])`
   - This query is incorrect. The dataset does not provide information on wifi for bars, so the query is not valid.

4. **Query 4**: `Search(fields=[name, category, has parking, has wifi], filters=[category == restaurant OR category == cafe], sort_by=[distance_to(Bards n Brews)])`
   - This query is correct. It searches for restaurants and cafes and sorts them by distance to "Bards n Brews".

5. **Query 5**: `Search(fields=[name, category, price, viewpoint], filters=[price <= 80, viewpoint == True], sort_by=[distance_to(Bards n Brews)])`
   - This query is correct. It searches for places with a viewpoint and price <= 80, sorted by distance to "Bards n Brews".

6. **Query 6**: `Search(fields=[name, category, price, viewpoint], filters=[price <= 80, viewpoint == True], sort_by=[distance_to(Bards n Brews), distance_to(Asha Tea House)], limit=1)`
   - This query is incorrect. The sorting by two distances simultaneously is not a standard operation, making the query invalid.

Now, let's summarize the results:

- Total number of queries: 6
- Number of incorrect queries: 2 (Queries 3 and 6)
- Number of correct queries: 4 (Queries 1, 2, 4, and 5)

Therefore, the result is:

[result]:: 6, 2, 4